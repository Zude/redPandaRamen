'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

exports.toAbsolutePath = toAbsolutePath;
exports.exists = exists;
exports.isFile = isFile;
exports.contains = contains;
exports.listFiles = listFiles;
exports.convert = convert;
exports.openFile = openFile;
exports.loadJson = loadJson;
exports.saveJson = saveJson;
exports.loadGlobalFrontmatter = loadGlobalFrontmatter;
exports.loadDynamicModule = loadDynamicModule;
exports.resolvePage = resolvePage;
exports.resolveStatic = resolveStatic;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _customError = require('./customError');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var projectPath = process.cwd();
var DEFAULTS = {
	get indexExtensions() {
		return ['hbs', 'html'];
	}
};

function toAbsolutePath(p) {
	return p && p.includes(projectPath) ? p : _path2.default.join(projectPath, p);
	/*
 return path.isAbsolute(p)
 	? p
 	: path.join(projectPath, p);
 */
}

// https://stackoverflow.com/a/34509653
function ensureDirectoryExistence(filePath) {
	var dirname = _path2.default.dirname(filePath);
	if (_fs2.default.existsSync(dirname)) {
		return true;
	}
	ensureDirectoryExistence(dirname);
	_fs2.default.mkdirSync(dirname);
}

function exists(anyPath) {
	return _fs2.default.existsSync(anyPath);
}

function isFile(anyPath) {
	return exists(anyPath) && _fs2.default.lstatSync(toAbsolutePath(anyPath)).isFile();
}

// prüft, ob ein Ordner eine bestimmte Datei enthält
function contains(directory, entry) {
	var pathToDir = toAbsolutePath(directory);
	var fileList = _fs2.default.readdirSync(pathToDir);

	var found = fileList.map(function (aEntry) {
		return aEntry === entry;
	}).reduce(function (val, cur) {
		return val || cur;
	}, false);

	return found;
}

function listFiles(directory) {
	var pathToDir = toAbsolutePath(directory);

	return exists(pathToDir) ? _fs2.default.readdirSync(pathToDir) : [];
}

// TODO: Andere Zeichen erlauben (bspw. "_")
// TODO: mit 'resolvePage' zusammenführen
// Liefert eine Liste von infrage kommenden Dateien.
//
// Entfernt Anker
// Entfernt Query-Parameter
// Ergänzt Ordnerpfade um ein 'index', sofern keine Datei angegeben wurde
// Ergänzt fehlende Dateierweiterung um ['.html', '.hbs']
function convert(url) {
	var result = url === '' ? '/' : url;

	result = result.match(/([\/\.0-9a-zA-Z-_]+)(?=[\?#])?/g)[0] || result;

	if (result.slice(-1) === '/') {
		result += 'index';
	}

	if (result.indexOf('.') === -1) {
		result += '.hbs';
	}

	return result;
}

function openFile(pathToFile) {
	var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';

	return _fs2.default.readFileSync(pathToFile, encoding);
}

// from https://gist.github.com/pbakondy/f5045eff725193dad9c7
function stripBOM(content) {
	content = content.toString();
	// Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	// because the buffer-to-string conversion in `fs.readFileSync()`
	// translates it to FEFF, the UTF-16 BOM.
	if (content.charCodeAt(0) === 0xFEFF) {
		content = content.slice(1);
	}
	return content;
}

function loadJson(filename) {
	var directory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';

	var fname = filename.split(".")[0] + '.json';
	var pathToFile = _path2.default.join(projectPath, directory, fname);

	return _fs2.default.existsSync(pathToFile) ? JSON.parse(stripBOM(_fs2.default.readFileSync(pathToFile, 'utf8'))) : undefined;
}

function saveJson(filename, obj) {
	var directory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '/';

	var fname = filename.split(".")[0] + '.json';
	var pathToFile = toAbsolutePath(_path2.default.join(directory, fname));
	var jsonStr = (0, _stringify2.default)(obj, null, '\t');

	ensureDirectoryExistence(pathToFile);
	_fs2.default.writeFileSync(pathToFile, jsonStr, 'utf8');
}

function loadGlobalFrontmatter() {
	try {
		return loadJson('global.json') || {};
	} catch (error) {
		throw (0, _customError.JsonParseError)('global.json', error.message);
	}
}

function loadDynamicModule(name) {
	var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';

	var filename = name.extname === 'js' ? name : name + '.js';
	var directory = toAbsolutePath(dir);

	if (contains(directory, filename)) {
		var modulePath = toAbsolutePath(_path2.default.join(directory, filename));
		delete require.cache[require.resolve(modulePath)];
		return require(modulePath);
	} else {
		return (0, _customError.ModuleNotFound)('Module ' + name + ' not found.');
	}
}

function resolvePage(calledUrl, routePath) {
	var parsedUrl = _path2.default.parse(calledUrl.startsWith('/') ? calledUrl.substr(1) : calledUrl);
	var parsedPath = _path2.default.parse(routePath.startsWith('/') ? routePath.substr(1) : routePath);

	var fname = parsedPath.base === '*' ? parsedUrl.base : parsedPath.base;
	fname = fname.length === 0 ? 'index' : fname;

	var fileFound = false;
	var extensions = DEFAULTS.indexExtensions;
	var pathToFile = '';
	var ext = '';
	var dir = '';

	while (!fileFound && extensions.length > 0) {
		ext = extensions.pop();
		var qfname = fname.includes('.') ? fname : fname + '.' + ext;
		dir = parsedPath.dir;
		pathToFile = _path2.default.join(dir, qfname);
		fileFound = isFile(_path2.default.join('pages', pathToFile));
	}

	return fileFound ? pathToFile : (0, _customError.FileNotFoundError)('Can not find file "' + fname + '" in directory "pages/' + dir + '"');
}

function resolveStatic(calledUrl, route, ignoreExistence) {
	var result = route.static; // default: serve specific file

	// if route is not a specific file, determine the correct path
	if (_path2.default.parse(route.static).ext.length === 0) {
		var urlPath = new RegExp(route.urlRegex).exec(calledUrl)[1];
		result = '' + route.static.split('*')[0] + urlPath;
	}

	if (!ignoreExistence && !isFile(toAbsolutePath(result))) {
		return (0, _customError.FileNotFoundError)('Can not find static file "' + result + '".');
	}

	return result;
}
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

exports.saveSessionData = saveSessionData;
exports.parseParams = parseParams;
exports.parseSession = parseSession;

var _helper = require('./helper');

var _ressourceUtils = require('./ressource-utils');

var _customError = require('./customError');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resDir = 'sessions';

function generateId() {
	return '_' + Math.random().toString(36).substr(2);
}

function dateNow() {
	return new Date().toLocaleString('de-DE');
}

function openSession(id) {
	var now = dateNow();
	var session = {
		'id': id,
		'createdAt': now,
		'lastAccess': {
			'timestamp': now,
			'url': ''
		},
		'data': {
			'session-id': id
		}
	};

	var loadedSession = undefined;
	try {
		loadedSession = (0, _ressourceUtils.loadJson)(id, resDir);
	} catch (error) {
		throw (0, _customError.JsonParseError)('sessions/' + id + '.json', error.message);
	}

	if ((0, _helper.isDefined)(loadedSession)) {
		session.createdAt = loadedSession.createdAt || session.createdAt;
		session.data = loadedSession.data || session.data;
		if ((0, _helper.isDefined)(loadedSession.lastAccess)) {
			session.lastAccess.timestamp = loadedSession.lastAccess.timestamp;
			session.lastAccess.url = loadedSession.lastAccess.url;
		}
	}

	return session;
}

function saveSessionData(data) {
	if ((0, _helper.isUndefined)(data['session-id'])) {
		throw (0, _customError.SessionSaveError)('Session Id is undefined. Could not save session: ' + (0, _stringify2.default)(data) + '. Make sure you do not overwrite the session-id in a controller.');
	}
	var session = (0, _assign2.default)({}, openSession(data['session-id']), { data: data });

	saveSession(session);
}

function saveSession(session) {
	var get = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var post = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

	var persistentSession = (0, _assign2.default)({}, openSession(session.id), session);
	var data = (0, _assign2.default)({}, persistentSession.data, get, post, { 'session-id': persistentSession.id });
	var toSave = (0, _helper.copy)(persistentSession);

	toSave.id = persistentSession.id;
	toSave.createdAt = persistentSession.createdAt;
	toSave.lastAccess = {
		timestamp: dateNow(),
		url: path.length > 0 ? path : persistentSession.lastAccess.url
	};
	toSave.data = data;

	(0, _ressourceUtils.saveJson)(toSave.id, toSave, resDir);
}

function parseCookie(req, res, get, post) {
	var sessionId = '';

	if ((0, _helper.isDefined)(req.cookies) && (0, _helper.isDefined)(req.cookies['session-id'])) {
		sessionId = req.cookies['session-id'];
	} else {
		sessionId = generateId();
		res.setHeader('Set-Cookie', 'session-id=' + sessionId);
	}

	var session = openSession(sessionId);

	return session;
}

// TODO: Klären: url "/item/:id/price" würde ohne controller eine Suche nach einer page "/pages/item/id42/price" auslösen.
function parseParams(req, route, res) {
	var url = req.path;
	var params = {
		path: {},
		get: {},
		post: {}
	};

	// Input
	// url			::= /item/id42/price?currency=euro
	// route.url	::= /item/:id/*
	// route.params ::= { path: ["id"], get: [], post: [] }

	// Extracting Path Parameters
	var combined = (0, _helper.zip)([route.url.split('/'), url.split('/')]);
	combined.forEach(function (_ref) {
		var _ref2 = (0, _slicedToArray3.default)(_ref, 2),
		    key = _ref2[0],
		    value = _ref2[1];

		if (key.startsWith(':')) {
			var k = key.substr(1);
			params.path[k] = value;
		}
	});

	// Extracting Get Parameters
	// TODO: Array vs. String ("/item/id42/price?currency=euro&sortBy=price&groupBy[]=name&groupBy[]=country")
	(0, _keys2.default)(req.query).forEach(function (key) {
		if (route.params.get.length === 0 || route.params.get.includes(key) && (0, _helper.isDefined)(req.query[key])) {
			params.get[key] = req.query[key];
		}
	});
	if ((0, _keys2.default)(req.query).length > 0 && route.params.get.length === 0) {
		console.log('Warning: Get Parameters are used without an appropriate params definition in this route. This will whitelist all parameters for you, but change it to a specific definition.');
	}

	// Extracting Post Parameters
	(0, _keys2.default)(req.body).forEach(function (key) {
		if (route.params.post.length === 0 || route.params.post.includes(key) && (0, _helper.isDefined)(req.body[key])) {
			params.post[key] = req.body[key];
		}
	});
	if ((0, _keys2.default)(req.body).length > 0 && route.params.post.length === 0) {
		console.log('Warning: Post Parameters are used without an appropriate params definition in this route. This will whitelist all parameters for you, but change it to a specific definition.');
	}

	// Output
	// url			::= /item/.*/.*
	// params		::=	{ path: {"id": "id42}, get: {"currency": "euro"}, post: {} }
	console.log('Parsed request parameters are: ' + (0, _stringify2.default)(params));
	console.log("Consider to define a <params> object in your route if expected parameters are missing. See full description here: http://fhw-web.readthedocs.io/de/latest/routes.html#parameter");
	return params;
}

function parseSession(req, res, params) {
	// Extracting Session from Set-Cookies' session-id
	// If no session-id is provided, a new session will be opened
	var session = parseCookie(req, res, params.get, params.post);
	console.log('Opened session with id "' + session.id + '".');
	console.log('Parsed Session Data is: ' + (0, _stringify2.default)(session.data));

	return session.data;
}
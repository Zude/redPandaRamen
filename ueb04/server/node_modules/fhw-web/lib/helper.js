'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.zip = undefined;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

exports.isObject = isObject;
exports.isUndefined = isUndefined;
exports.isDefined = isDefined;
exports.isArray = isArray;
exports.isString = isString;
exports.isFunction = isFunction;
exports.parseJson = parseJson;
exports.parseYaml = parseYaml;
exports.isJson = isJson;
exports.isYaml = isYaml;
exports.copy = copy;
exports.objectFlatMap = objectFlatMap;
exports.mergeObjects = mergeObjects;
exports.unpackSqlResult = unpackSqlResult;

var _yaml = require('yaml');

var _yaml2 = _interopRequireDefault(_yaml);

var _customError = require('./customError');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isObject(obj) {
	return (typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) === 'object' && !Array.isArray(obj);
}

function isUndefined(obj) {
	return obj == null;
}

function isDefined(obj) {
	return !isUndefined(obj);
}

function isArray(obj) {
	return Array.isArray(obj);
}

function isString(obj) {
	return typeof obj === "string";
}

function isFunction(obj) {
	return typeof obj === 'function';
}

// lists ::= [aList, aList]
// aList ::= [object]
// @return like python's zip function
// shortest length
// from https://stackoverflow.com/a/10284006
var zip = exports.zip = function zip(rows) {
	return rows[0].map(function (_, c) {
		return rows.map(function (row) {
			return row[c];
		});
	});
};

function parseJson(str, filename) {
	try {
		return JSON.parse(str);
	} catch (error) {
		throw (0, _customError.JsonParseError)(filename, error.message);
	}
}

function parseYaml(str, filename) {
	try {
		return _yaml2.default.parse(str);
	} catch (error) {
		throw (0, _customError.YamlParseError)(filename, error.message);
	}
}

function isJson(str) {
	try {
		JSON.parse(str);
	} catch (error) {
		return false;
	}

	return true;
}

function isYaml(str) {
	try {
		_yaml2.default.parse(str);
	} catch (error) {
		return false;
	}

	return true;
}

function copy(obj) {
	return JSON.parse((0, _stringify2.default)(obj));
}

/*
	Merges an array of objects of the following style
	[{key: value}]
	into one object of all containing keys.
	notice: no key-collision handling included
 */
function objectFlatMap(arrOfObjects) {
	return arrOfObjects.reduce(function (result, anObject) {
		var key = (0, _keys2.default)(anObject)[0];
		result[key] = anObject[key];
		return result;
	}, {});
}

/*
 * merges a list of object
 * uses last occurrence whenever keys overlap
 *
 */
function mergeObjects() {
	for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {
		objects[_key] = arguments[_key];
	}

	return objects.reduce(function (obj, val) {
		return (0, _assign2.default)(obj, val);
	}, {});
}

function unpackSqlResult(result) {
	if (result.length === 1) {
		return unpackSqlResult(result[0]);
	}

	if ((0, _keys2.default)(result).length === 1) {
		return (0, _values2.default)(result)[0];
	}

	return result;
}
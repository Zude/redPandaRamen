'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.start = start;
exports.loadJson = loadJson;
exports.saveJson = saveJson;

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _cookieParser = require('cookie-parser');

var _cookieParser2 = _interopRequireDefault(_cookieParser);

var _multer = require('multer');

var _multer2 = _interopRequireDefault(_multer);

var _compile = require('./compile');

var _customError = require('./customError');

var _validator = require('./validator');

var _defaultConfig = require('./defaultConfig');

var _defaultConfig2 = _interopRequireDefault(_defaultConfig);

var _routes = require('./routes');

var _routes2 = _interopRequireDefault(_routes);

var _ressourceUtils = require('./ressource-utils');

var _helper = require('./helper');

var _parameters = require('./parameters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noValidation = {
	html: false,
	css: false
};

// use the defaultConfig as a basis
// overwrite only entries which are user defined
function combineConfiguration() {
	var userConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	function combineObjects(defaultObj, userObj) {
		return (0, _keys2.default)(defaultObj).reduce(function (acc, key) {

			if ((0, _helper.isObject)(defaultObj[key])) {
				acc[key] = (0, _helper.isDefined)(userObj[key]) ? combineObjects(defaultObj[key], userObj[key]) : defaultObj[key];
			} else {
				acc[key] = (0, _helper.isDefined)(userObj[key]) ? userObj[key] : defaultObj[key];
			}

			return acc;
		}, {});
	}

	return combineObjects(_defaultConfig2.default, userConfig);
}

function serveStatic(pathToFile, params, response) {
	if (pathToFile instanceof Error) {
		return pathToFile;
	}
	var pathToStatic = (0, _ressourceUtils.toAbsolutePath)(pathToFile);

	return new _promise2.default(function (resolve, reject) {
		response.sendFile(pathToStatic, function (error) {
			if (error) {
				console.log("Error in serving static ressource:", error.message);
				return reject(error); //TODO: CustomError Class?
			} else {
				return resolve({ html: false, validation: noValidation });
			}
		});
	});
}

function servePage(pathToFile) {
	var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var sessionData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	var pageData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	var status = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 200;

	if (pathToFile instanceof Error) {
		return pathToFile;
	}
	var frontmatter = (0, _assign2.default)({}, { request: params }, { global: (0, _ressourceUtils.loadGlobalFrontmatter)() }, { page: pageData }, { session: sessionData });
	console.log("serverPage", pathToFile);
	return (0, _compile.compile)(pathToFile, frontmatter).then(function (html) {
		return _promise2.default.resolve({ html: html, status: status });
	});
}

function serveFragment(pathToFile) {
	var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var sessionData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	var pageData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	var status = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 200;

	var frontmatter = (0, _assign2.default)({}, { request: params }, { global: (0, _ressourceUtils.loadGlobalFrontmatter)() }, { page: pageData }, { session: sessionData });

	return (0, _compile.compile)(pathToFile, frontmatter, 'templates').then(function (html) {
		return _promise2.default.resolve({ html: html, status: status, validation: noValidation });
	});
}

function serveJson(response, json, status) {
	return new _promise2.default(function (resolve, reject) {
		response.status(status);
		response.json(json);
		resolve({ html: false, validation: noValidation });
	});
}

function serveText(response, text, status) {
	return new _promise2.default(function (resolve, reject) {
		response.status(status || 200);
		response.send(text);
		resolve({ html: false, status: status, validation: noValidation });
	});
}

function serveController(response, controllerName, functionName) {
	var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	var sessionData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

	var module = (0, _ressourceUtils.loadDynamicModule)(controllerName, 'controller');

	if (module instanceof Error) {
		return module;
	}

	if ((0, _helper.isUndefined)(module[functionName])) {
		throw (0, _customError.FunctionNotFoundError)('Module ' + controllerName + ' does not exports a function named ' + functionName + '. Please check the documentation.');
	}
	var frontmatter = (0, _assign2.default)({}, { request: (0, _helper.copy)(params) }, { session: sessionData }, { global: (0, _ressourceUtils.loadGlobalFrontmatter)() });
	var controllerResult = module[functionName](frontmatter);

	// Controller call can return either a Promise or the result directly
	function resolveControllerCall(result) {
		// Controller could edit the session data; so save the session!
		(0, _parameters.saveSessionData)(sessionData);

		if ((0, _helper.isDefined)(result.page)) {
			return servePage(result.page, params, sessionData, result.data, result.status);
		} else if ((0, _helper.isDefined)(result.fragment)) {
			return serveFragment(result.fragment, params, sessionData, result.data, result.status);
		} else if ((0, _helper.isDefined)(result.json)) {
			return serveJson(response, result.json, result.status);
		} else if ((0, _helper.isDefined)(result.text)) {
			return serveText(response, result.text, result.status);
		} else if ((0, _helper.isDefined)(result.redirect)) {
			return response.redirect(result.status || 301, result.redirect);
		} else {
			throw (0, _customError.ControllerReturnValueError)("Return Value of Controller does not fulfill the required syntax. Please check the documentation.");
		}
	}

	return (0, _helper.isDefined)(controllerResult.then) && (0, _helper.isFunction)(controllerResult.then) ? controllerResult.then(resolveControllerCall) : resolveControllerCall(controllerResult);
}

/*
	userConfig ::= { <port> }

	port ::= <Integer>
 */
function start(userConfig) {
	var app = (0, _express2.default)();
	var config = combineConfiguration(userConfig);

	app.use(_bodyParser2.default.urlencoded({ extended: true }));
	app.use(_bodyParser2.default.json());
	app.use((0, _cookieParser2.default)());

	// TODO: therefore there is no favicon in the root directory allowed
	app.get('/favicon.ico', function (req, res) {
		console.log('NOTE: A favicon in the projects\' root directory will be ignored. Please change its location in a subdirectory like "assets" and define a route for it.');
		res.status(204);
		res.send();
	});

	/* parse multipart/form-data (provided by a XMLHttpRequest with FormData) */
	app.use((0, _multer2.default)().fields([]), function (req, res, next) {
		next();
	});

	app.use(function (req, res) {
		var calledUrl = req.path;
		console.log('\n\nCalling ressource "' + calledUrl + ' with method ' + req.method + '".');

		(0, _compile.reloadDatabase)().then(_routes2.default.bind(null, config)).then(function (routes) {
			//TODO different error msg, if no route found

			// loop will stop early, if a route for called url was found
			for (var index = 0; index < routes.length; ++index) {
				var route = routes[index];
				var isDefinedRoute = new RegExp(route.urlRegex).test(calledUrl);
				var isDefinedMethod = route.method.includes(req.method.toLowerCase());

				if (isDefinedRoute && isDefinedMethod) {
					console.log('Found matching route with index ' + index);
					var result = {};
					var params = (0, _parameters.parseParams)(req, route, res);

					if ((0, _helper.isDefined)(route.static)) {
						var pathToFile = (0, _ressourceUtils.resolveStatic)(calledUrl, route);
						result = serveStatic(pathToFile, params, res);
					}
					var sessionData = (0, _parameters.parseSession)(req, res, params);

					if ((0, _helper.isDefined)(route.page)) {
						var _pathToFile = (0, _ressourceUtils.resolvePage)(calledUrl, route.page);
						result = servePage(_pathToFile, params, sessionData);
					}
					if ((0, _helper.isDefined)(route.controller)) {
						result = serveController(res, route.controller.file, route.controller.function, params, sessionData);
					}

					if (!(result instanceof Error)) {
						return result;
					}
				}
			}
			throw (0, _customError.RouteNotFoundError)('Could not find any matching route definition for called url ' + calledUrl + '.');
		}).then(function (result) {
			var validate = (0, _helper.isDefined)(result.validation) && result.validation.html || !(0, _helper.isDefined)(result.validation) && config.validator.html;

			if (!res.finished && result && result.html && validate) {
				return (0, _validator.validateHtml)(result);
			} else {
				return _promise2.default.resolve(result);
			}
		}).then(function (result) {
			var validate = (0, _helper.isDefined)(result.validation) && result.validation.css || !(0, _helper.isDefined)(result.validation) && config.validator.css;

			if (!res.finished && result && result.html && validate) {
				return (0, _validator.validateCss)(result);
			} else {
				return _promise2.default.resolve(result);
			}
		}).then(function (result) {
			// check, if result was already sent
			//   i.e. when serving static content
			//        express' function "sendFile" already handles the response
			if (!res.finished) {
				if (result && result.html) {
					res.status(result.status || 200);
					res.send(result.html);
				} else {
					throw (0, _customError.RessourceNotFoundError)('Could not find ressource "' + req.originalUrl + '" with requeset method "' + req.method + '".');
				}
			}
		}).catch(function (error) {
			// TODO: CustomError?
			if (!res.finished) {
				res.status(500);
				res.send((0, _customError.generateErrorPage)(error));
			} else {
				console.log("Unexpected Server Error with Code 1. Please send a report to mpg@fh-wedel.de.");
			}
		}).finally();
	});

	// TODO: do a server restart if configuration (i.e. port) has changed
	app.listen({
		port: config.port
	}, function () {
		console.log('\nServer listening on http://localhost:' + config.port + '/\n');
	});
}

function loadJson(documentName) {
	try {
		return (0, _ressourceUtils.loadJson)(documentName, 'data');
	} catch (error) {
		throw (0, _customError.JsonParseError)('data/' + documentName + '.json', error.message);
	}
}

function saveJson(documentName, obj) {
	try {
		return (0, _ressourceUtils.saveJson)(documentName, obj, 'data');
	} catch (error) {
		throw (0, _customError.JsonParseError)('data/' + documentName + '.json', obj, error.message);
	}
}